package resource

import (
	"fmt"

	"github.com/hashicorp/consul/acl"
	"github.com/hashicorp/consul/proto-public/pbresource"
)

// Resource type registry
type Registry interface {
	Register(Registration) error
}

type ResourceRegistry struct {
	registrations map[string]Registration
}

func (r *ResourceRegistry) Register(registration Registration) error {
	gvk := ToGVK(registration.Type)
	if _, ok := r.registrations[gvk]; ok {
		return fmt.Errorf("Resource type %s already registered", gvk)
	}
	r.registrations[gvk] = registration
	return nil
}

func ToGVK(resourceType *pbresource.Type) string {
	// TODO: is `/` delimiter safe?
	return fmt.Sprintf("%s/%s/%s", resourceType.Group, resourceType.GroupVersion, resourceType.Kind)
}

type Registration struct {
	// Type is the GVK of the resource type.
	Type *pbresource.Type

	// Controller is responsible for reconciling the resource.
	// Controller controller.Builder

	// Validate is called to structurally validate the resource (e.g.
	// check for required fields).
	Validate func(*pbresource.Resource) error

	// Mutate is called to fill out any autogenerated fields (e.g. UUIDs).
	Mutate func(*pbresource.Resource) error

	// ACLs are hooks called to perform authorization on RPCs.
	ACLs *ACLHooks

	// VersionMappings are hooks called to translate between different
	// schema versions of the same resource type.
	VersionMappings []VersionMapping
}

type ACLHooks struct {
	// Read is used to authorize Read RPCs and to filter results in List
	// RPCs.
	//
	// If it is omitted, `operator:read` permission is assumed.
	Read func(*acl.Authorizer, *pbresource.ID)

	// Write is used to authorize Write and Delete RPCs.
	//
	// If it is omitted, `operator:write` permission is assumed.
	Write func(*acl.Authorizer, *pbresource.Resource)

	// List is used to authorize List RPCs.
	//
	// If it is omitted, we only filter the results using Read.
	List func(*acl.Authorizer, *pbresource.Tenancy)
}

type VersionMapping struct {
	// From is the type the mapping will translate from.
	From *pbresource.Type

	// To is the type the mapping will translate to.
	To *pbresource.Type

	// Translate is the function that performs the translation.
	// Translate func(proto.Message) (proto.Message, error)
}

// Example Registration
// package foo

// var Type = &pbresource.Type{
// 	Group:        "demo",
// 	GroupVersion: "v1alpha1",
// 	Kind:         "foo",
// }

// func Register(registry *resource.Registry) {
// 	registry.Register(resource.Registration{
// 		Type: Type,
// 		Validate: func(res *pbresource.Resource) error {
// 			// Structurally validate the resource.
// 		},
// 		Mutate: func(res *pbresource.Resource) {
// 			// Fill in any generated fields (e.g. UUIDs)
// 		},
// 		ACLs: &resource.ACLHooks{
// 			Read: func(authz *acl.Authorizer, id *pbresource.ID) error {
// 				// Check for `<type>:read` permission.
// 			},
// 			Write: func(authz *acl.Authorizer, res *pbresource.Resource) error {
// 				// Check for `<type>:write` permission.
// 			},
// 			List: func(authz *acl.Authorizer, ten *pbresource.Tenancy) error {
// 				// Check for `<type>:list` permission.
// 			},
// 		},
// 	})

// }
